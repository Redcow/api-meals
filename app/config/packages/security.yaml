security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        #users_in_memory: { memory: null }
        app_client_provider:
            entity:
                class: App\Order\Infrastructure\Doctrine\Entity\ClientUser
                property: email

        app_cook_provider:
            entity:
                class: App\Meal\Infrastructure\Doctrine\Entity\CookUser
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        meal:
            pattern: ^/api/cooks
            stateless: true
            provider: app_cook_provider
            json_login:
                check_path: /api/cooks/auth/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
        client:
            pattern: ^/api/orders
            stateless: true
            provider: app_client_provider
            json_login:
                check_path: /api/orders/auth/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
            #provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/cooks/auth, roles: PUBLIC_ACCESS }
         - { path: ^/api/cooks/, roles: ROLE_COOK }

         - { path: ^/api/orders/auth, roles: PUBLIC_ACCESS }
         - { path: ^/api/orders/, roles: IS_FULLY_AUTHENTICATED }

         - { path: ^/api/meals, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
